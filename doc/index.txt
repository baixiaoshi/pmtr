pmtr: a non-initscript for servers
==================================
Troy D. Hanson <tdh@tkhanson.net>
v1.4 March 2014

include::twitter.txt[]

What does pmtr do?
------------------
Pmtr is like an "initscript"- it's used to start your servers at boot. If they
exit, it restarts them. It's small, written in C, free, open-source and for
Linux only.  You can have any number of servers (daemons) in the config file.

.Example `/etc/pmtr.conf`
--------------------------------------------------------
  job {
    name node-app
    cmd /usr/local/bin/node websocket-server.js

    # the rest are optional
    dir /data/app
    out node.out
    err node.err
    user app
  }

--------------------------------------------------------

Only the name and command are required. See the <<options,full options>> below. 

.Why did I write it?
**************************************************************************
I wanted to have all my application jobs listed in one easily-edited file.
You could instead write platform-specific initscripts, upstart jobs, etc. 
I prefer pmtr for application servers. It works on Centos, Ubuntu, etc.
**************************************************************************

Pmtr applies changes immediately whenever its configuration is edited- see
<<rescan,When do configuration changes take effect?>>.  Take note of the
<<requirements,requirements for pmtr jobs>>.

Pmtr has been used in production for several years, managing jobs on hundreds on
Linux systems.

Download & Install
------------------

Platforms
~~~~~~~~~
Pmtr is for Linux only. It's been tested on:

* Ubuntu (10+)
* CentOS/RHEL (6+)
* Debian (6+)

Download options
~~~~~~~~~~~~~~~~

You can:

 * download a https://github.com/troydhanson/pmtr/archive/master.zip[zipfile here]. 
 * Or clone the git repository: `git clone https://github.com/troydhanson/pmtr.git`

Build and install
~~~~~~~~~~~~~~~~~
To build and install:

  cd pmtr
  make
  sudo make install

The result of installation is:

 * `/usr/bin/pmtr` - the executable
 * `/etc/pmtr.conf` - the configuration file (initially empty)
 * an initscript to run pmtr at boot (OS-specific)

Upon completion of `sudo make install`, pmtr should be running. Verify using:

  service pmtr status

A couple ancillary scripts are installed also: `/usr/bin/pmtr-rptserver` - for
remote monitoring of pmtr jobs, if enabled; and `/usr/bin/pmtr-ctl` - for remote
disabling and enabling of jobs. These remote features are disabled by default.

.Who starts pmtr?
********************************************************************************
Pmtr starts up automatically during the boot process. An OS-specific initscript
makes this happen.  You can use your system's `service` command to start and
stop pmtr manually (like `service pmtr start`), but normally you just let the OS
start up pmtr automatically at boot.
********************************************************************************

Configuration file 
------------------
When pmtr is started at system boot, it reads the configuration file --
by default `/etc/pmtr.conf` -- and starts up the jobs defined there. 

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Indentation is optional. Blank lines are ok. 

  job {
    name node-server
    cmd /usr/local/bin/node trends.js -e "New York"
  }

Only 'name' and 'cmd' are required. The `cmd` is the absolute path to the
executable. It must have its executable bit set.  The command may contain 
arguments; double-quote the arguments if they contain spaces. Comments should
be on their own line and start with `#`.

Job options
~~~~~~~~~~~
[[options]]
[width="90%",cols="10m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | job name (used for logging)
|cmd            | absolute path to executable, with optional arguments
|dir            | optional- absolute path to the working directory 
|out            | optional- file to receive stdout
|err            | optional- file to receive stderr
|in             | optional- file to set up as stdin
|user           | optional- user whose id to run the job as
|env            | optional- `VAR=VALUE` environment variable settings (repeatable)
|disable        | optional- if present, disables the job 
|===============================================================================

name::
  unique 'name' for the job, to make log messages more readable

cmd::
  the absolute pathname to an executable, with optional arguments.
  Quoting using double-quotes is supported in the arguments. 

dir::
  set the 'working directory' that the job will have upon startup.

in::
  file to open as stdin. Default: `/dev/null`

out::
  file to receive stdout. Default: `/dev/null`

err::
  file to receive stderr. Default: `/dev/null`

user::
  the unix username whose id should execute the job. Default: root.

env::
  set an environment variable for the job, e.g., `env DEBUG=1` (repeatable)

disable::
  make the job inactive. Can be used instead of commenting out the job definition.

One-time jobs
^^^^^^^^^^^^^
Pmtr has limited support for one-time jobs intended for "initial setup" type of
situations.  There are two options that are used for this.  The `wait` option
prevents pmtr from going on to start subsequent jobs, until this one exits.
Then, `once` tells pmtr not to restart it. (If pmtr itself is restarted, or if
the job configuration is changed, the job would be executed once again).

  job {
    name setup-ramdisk
    cmd /bin/mkdir /dev/shm/app-ramdisk
    wait
    once
  }

Testing config file syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
You can check the syntax of a configuration file using `-t` (test syntax only)
which may be used with `-c` to specify a configuration to test. Any syntax errors
are displayed; the exit code is always 0.

  pmtr -tc /tmp/pmtr.conf

[[rescan]]
When do configuration changes take effect?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes get applied immediately. Pmtr
watchces the configuration file to notice when it has been updated. The changes
are applied minimally - only jobs whose definition has changed are affected. 

 * A newly-added job gets started.
 * A deleted job is terminated.
 * A changed job is restarted with its new configuration.

To terminate a job, pmtr sends SIGTERM to it, then SIGKILL shortly afterward.

If you stop pmtr itself (for example, by running `service pmtr stop`), it
terminates its jobs before exiting.  

Jobs
----

Logging
~~~~~~~
As jobs start up, exit, and so on, messages are sent to *syslog*. Depending on
your syslog configuration, the messages might go to `/var/log/syslog`, or
`/var/log/messages`, or somewhere else. Typical log messages are like:

  Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job websocket-server [18478]

[NOTE]
.Look for errors 
If there's a syntax error or other problem (such as invalid user) in
your configuration, pmtr can only communicate that back to you in the
log messages - so be sure you check them when making config changes!

[[requirements]]
Is the job suitable to run under pmtr?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jobs that you intend to run under `pmtr` should:

 * stay in the *foreground*
 * *exit* on SIGTERM or SIGKILL 
 * cause any *sub-processes* to exit if the job exits

Restart handling
~~~~~~~~~~~~~~~~
Pmtr restarts a job that exits, provided it's been running at least ten seconds.

Rapid restart prevention
^^^^^^^^^^^^^^^^^^^^^^^^
If a job exits quickly after starting (less than 10 seconds after it started),
pmtr waits ten seconds before restarting it. This avoids rapid restart cycles.
For servers, a quick exit often means the job has some sort of configuration problem.

  Nov  7 22:01:13 ubuntu pmtr[18477]: job app-server 8552 exited after 0 sec: exit status 0

Exit status
^^^^^^^^^^^
A job that exits normally or terminates due to a signal is logged with its exit
code or signal number. Note that exit code 33 is special. If pmtr sees a job
exit with code 33 it does not restart it.

Remote control
--------------
NOTE: remote control is disabled by default.

Two special configuration options can appear in `pmtr.conf`. The first is
`report to` which causes pmtr to send a periodic (every 10 seconds) status
message to the remote UDP endpoint whose IP address and port number are listed.
The `listen on` option allows remote systems to enable or disable pmtr jobs.

  report to udp://127.0.0.1:9999
  listen on udp://0.0.0.0:10000

report to
~~~~~~~~~
The `report to` option designates a remote endpoint to receive updates from pmtr.
The udp packet sent by pmtr to the remote endpoint lists the jobs and their
elapsed runtime. Its payload is in simple text format. An example script,
`pmtr-rptserver`, included with pmtr, can be run to receive the reports.  It
maintains a file with the status of all reporting systems. E.g., 
`/usr/bin/pmtr-rptserver -p 9999 -f /var/log/pmtr-status.txt`.

listen on
~~~~~~~~~
With the `listen on` specification, pmtr listens on the specified IP address and
port for UDP messages of the form "enable xyz" or "disable xyz". An example
script included with pmtr can send these messages under command-line control: 

  /usr/bin/pmtr-ctl -s 127.0.0.1 -p 10000 enable app-server

This is to temporarily enable or disable a job. If `pmtr.conf` is edited or if
pmtr is restarted, the settings in the `pmtr.conf` once again take precedence.
There is no authentication with the `listen on` feature- use it only on trusted
internal networks. 

Resources
---------

News
~~~~
News on pmtr may be found by following @troydhanson on Twitter or on the
http://tkhanson.net/blog[author's blog]. image:rss.png[(RSS)]

Helping
~~~~~~~
Feel free to send pull requests through the
https://github.com/troydhanson/pmtr[pmtr Github page].  Please send bug reports
or suggestions through GitHub. You can email me at tdh@tkhanson.net, but I'm
often behind by weeks or months in replying.

Other software
~~~~~~~~~~~~~~
The author's other open-source software are listed at http://tkhanson.net.

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.


// vim: set tw=80 wm=2 syntax=asciidoc: 

