pmtr: process monitor
=====================
Troy D. Hanson <tdh@tkhanson.net>
v1.7 July 2014

include::twitter.txt[]

Back to the https://github.com/troydhanson/pmtr[pmtr Github page].

pmtr::
  a Linux process supervisor that can start your executables or scripts,
  usually at system boot, then monitor and restart them as needed

pmtr: process monitor
---------------------
Pmtr is a supervisor daemon that starts your programs and then babysits them.
Most "standard" system services (httpd, sshd, etc) have initscripts, which are
the typical way to run daemons on Linux. For programs you wrote yourself, or
your local application servers that don't have initscripts, you might find
pmtr easier to use or its features beneficial. Your jobs go in pmtr.conf:

.Example `/etc/pmtr.conf`
--------------------------------------------------------

  job {
    name rest_server
    cmd /usr/bin/python rest.py
  }

  # set working directory, keep errors
  job {
    name ws-server
    dir /home/maps
    cmd /usr/bin/node maps.js
    err /tmp/maps.err
  }

  # restart if dependencies change
  job {
    name proxy
    cmd /usr/bin/proxy -c /etc/proxy.cfg
    depends {
      /etc/proxy.cfg
    }
  }
  
  # bounce this job every hour, set ulimits
  job {
    name thermostat
    dir /home/thermo
    cmd /usr/bin/python therm.py
    bounce every 1h
    ulimit -n 10
    user nobody
  }

--------------------------------------------------------

See the <<options,full options>> below, and the <<requirements,requirements>>
for pmtr jobs. Pmtr applies changes immediately when the config file is edited.
The pmtr daemon itself is small, written in C, open-source and for Linux only.
It runs on Ubuntu, Debian, RHEL/CentOS, in Docker containers, and others.

.Why did I write it?
**************************************************************************
I wrote pmtr because I wanted one simple configuration file where I could
list all my programs, knowing that they'd be run at boot, get restarted if 
they exit, and they'd react immediately to configuration files changes.
**************************************************************************

.Does it work?
The author has used pmtr for several years in production on hundreds of systems
having dozens of jobs each.  If you find a bug or have a new feature to suggest-
please use the https://github.com/troydhanson/pmtr[pmtr Github page].

Download & Install
------------------

You can use the https://github.com/troydhanson/pmtr[Github page] to:

 * download a https://github.com/troydhanson/pmtr/archive/master.zip[zipfile]. 
 * or, git clone https://github.com/troydhanson/pmtr.git

Pmtr is for Linux only. It's been used on Ubuntu (10+), CentOS/RHEL (6+),
Debian (6+), and Raspbian (6+).  To build and install:

  cd pmtr
  make
  sudo make install

Verify pmtr is running using `service pmtr status`.  If you need to, you can
manually stop and start pmtr the usual way:

  service pmtr stop
  service pmtr start

The result of installation is:

 * the executabe: `/usr/bin/pmtr` 
 * the configuration file: `/etc/pmtr.conf` 
 * an OS-specific initscript to run pmtr at boot 

Command line options
--------------------
While pmtr is normally run as a background service, you can run it manually on
the command line, in which case you can specify these flags:

[width="60%",cols="10m,50",grid="none",options="none"]
|==========================================================================
| -c <file> | specify alternate configuration file
| -t        | test only- parse config file and exit (implies -F)
| -F        | Foreground (stay in foreground instead of detaching)
| -v        | verbose (use -vv to see token parsing)
|==========================================================================


Configuration file 
------------------
The default pmtr configuration file is `/etc/pmtr.conf`. 

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Indentation is optional. Blank lines are ok.  Comments start
with `#' and must be on their own line.

.A job with many options 
---------------------------------------------------
  # trending service
  # restarted daily 

  job {
    name trends
    dir /home/trends
    cmd /usr/bin/python trends.py "Hourly Trends"
    out trends.out
    err trends.err
    bounce every 1d
    ulimit -n 30
    depends {
      trends.conf
      /etc/py.conf
    }
    env LIBS=/opt/libs
    env DEBUG=1
    user pyuser
  }
---------------------------------------------------


Options
^^^^^^^
[[options]]
[width="90%",cols="20m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | descriptive job name used for logging - must be unique
|cmd            | executable (fully-qualified) and any arguments 
|dir            | working directory (fully qualified) to run the process in
|out            | send stdout to this file
|err            | send stderr to this file
|in             | hook stdin to this file
|env            | environment variable setting `VAR=VALUE` (repeatable)
|user           | unix username under whose id to run the process 
|ulimit         | an option and a numeric value, like `-n 30`      
|bounce every   | a time interval like 5m (five minutes) - units are `smhd`
|depends        | a curly-brace delimited list of files, one per line
|disable        | this keyword disables the job 
|===============================================================================

Further details:

* The required entries are `name` and `cmd`.
* The executable named in the `cmd` must have its executable-bit set. 
* The `cmd` may include trailing arguments e.g. `cmd /bin/node server.js`.  
* The `cmd` may contain double-quoted arguments.
* The `cmd` does no shell expansion: no wildcards, backticks, environment
  variables, etc. To use such features, write a script to wrap your executable
  or invoke the shell inline like `cmd /bin/bash -c "/bin/node `date` -f $DIR"`.
* Use `env` to push an environment variable into a job, e.g. `env TMPDIR=/tmp`.
* Use `env` repeatedly to set multiple environment variables.
* Use `disable` to stop a job, without having to comment it out.
* Use `out`, `err`, and `in` to attach stdout, stderr or stdin to a file.
* The stdout, stderr and stdin default to `/dev/null`.
* Use `user` to specify the unix user to run the job as; defaults to root.
* Use `ulimit` to modify the kernel-enforced resource limits for the job.
  It takes a flag denoting which limit to set, and a value, e.g., `ulimit -n
  30`. Only the `-n` flag (maximum file descriptors) has been implemented. The
  flag names are (planned to be) identical with those used by the `bash` shell-
  type `ulimit -a` in bash to list them. Also see the `setrlimit(2)` man page.
* The `bounce every` option kills and restarts the job every so often. It
  is intended for jobs that don't behave well as long-running processes. It
  takes a number and unit, like `5m` to restart a job every five minutes. The
  units are `smhd`- (s)econds, (m)inutes, (h)ours or (d)ays. The bounce timer
  runs every 10s- it's not for short intervals.
* Use `depends` to specify files that, if their content changes, should cause
  pmtr to restart the job. 

[[requirements]]
Job requirements
~~~~~~~~~~~~~~~~
In pmtr the term 'job' means a daemon. For our purposes, this is just
some executable- a binary or script- that you want to keep running. It must:

 * stay in the foreground
 * exit on SIGTERM or SIGKILL 
 * clean up any sub-processes when it exits

Checking config syntax
~~~~~~~~~~~~~~~~~~~~~~
To check the syntax of a configuration file, use the `-t` (test) flag:
  
  pmtr -tc /etc/pmtr.conf

This displays any syntax errors. Otherwise, if syntax errors are encountered at
runtime, when pmtr is running as a background service, pmtr logs them to syslog.

When do configuration changes take effect?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes get applied immediately. There
is no need to signal pmtr, because it already watches for config file changes. 

 * A newly-added job gets started.
 * A deleted job is terminated.
 * A changed job is restarted with its new configuration.

To terminate a job, pmtr sends SIGTERM to it, then SIGKILL shortly afterward.

If you stop pmtr itself (for example, by running `service pmtr stop`), it
terminates its jobs before exiting.  

One-time jobs
~~~~~~~~~~~~~
For "initial setup" situations, pmtr has basic support for one-time jobs. The
`wait` option makes pmtr wait for the job to exit before starting subsequent
jobs. To keep pmtr from restarting it, use the `once` option. 

  job {
        name create-ramdisk
        cmd /bin/mkdir -p /dev/shm/ws/data
        wait
        once
  }

Experimental 
~~~~~~~~~~~~
These features are disabled by default.

These configuration options may appear in `pmtr.conf` at the global scope.

  report to udp://127.0.0.1:9999
  listen on udp://0.0.0.0:10000

The `report to` option designates a remote address and port to which pmtr should
send a a UDP packet every ten seconds.  The packet payload lists the job names,
enabled or disabled status, and elapsed runtimes in simple text. (An included
script `pmtr/utils/pmtr-rptserver` can receive these reports and write updates
to a text file summarizing the received status messages. This script is invoked
like `pmtr-rptserver -p 9999 -f status.txt`).  If the `report to` address falls
in the multicast UDP range (e.g.  239.0.0.1, etc), the specification may include
a trailing interface, e.g., `report to udp://239.0.0.1:9999@eth2` to explicitly
designate the interface from which the multicast UDP datagrams should egress. 

The `listen on` option allows jobs to be remotely enabled or disabled. It
specifies a UDP address and port that pmtr should listen on for datagrams of
form `enable abc` or `disable abc`, where 'abc' is a job name.  The address
0.0.0.0 can be used as a shortcut to denote "any address" on this system. (A
script in `pmtr/utils/pmtr-ctl` may be used to send the datagrams, for example 
`pmtr-ctl -s 192.168.0.22 -p 10000 enable abc`). The effect is temporary; when
pmtr.conf is edited or pmtr is restarted, the pmtr.conf settings apply.  

pstree
------
To get a nice visual confirmation of the jobs you have running under pmtr, you
can use the `pstree` utility, if you have it installed.  Here is the output of
`pstree -p` with the PID's.

.Example pstree output
----------------------------------------
        ├─pmtr(2830)─┬─pmtr(2834)
        │            ├─proxy(2831)
        │            ├─sshd(2832)
        │            └─python(2833)
----------------------------------------

The rest of the system processes have been omitted. Note that pmtr has its
own child process. This is the dependency monitor that watches the config file.

Restarts
--------
Since pmtr is designed to keep things running, if a job exits, pmtr restarts it.

* If a job exits quickly- within ten seconds of when it started- pmtr 
  waits ten seconds to restart it. This avoids rapid restart cycles. The
  job probably has some sort of configuration problem if it exits quickly.
* Exit status 33 can be returned from a process to tell pmtr not to restart it.

Logging
-------
Look in syslog (typically `/var/log/messages` or `/var/log/syslog`) to see
pmtr log messages relating to configuration file changes and job activity.

  Nov  7 21:38:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job proxy [18478]
  Nov  7 21:38:20 ubuntu pmtr[18477]: job proxy [18478] exited after 10 sec: exit status 0


If your job isn't running, this is the first place to look. Pmtr is verbose
about restarting jobs, or indicating if they are exiting for some reason.

Resources
---------
* Please use the https://github.com/troydhanson/pmtr[pmtr Github page] for bug reports and pull requests.
* The http://troydhanson.github.io/[author's GitHub page] lists my other software.
* My http://tkhanson.net/blog[blog], and twitter https://twitter.com/troydhanson[@troydhanson].
* You can email me at tdh@tkhanson.net. I may not be able to reply- sorry!

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.


// vim: set tw=80 wm=2 syntax=asciidoc: 

