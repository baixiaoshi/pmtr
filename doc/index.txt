pmtr: a process monitor
=======================
Troy D. Hanson <tdh@tkhanson.net>
v1.5 June 2014

include::twitter.txt[]

Back to the https://github.com/troydhanson/pmtr[pmtr Github page].

pmtr::
  a Linux program that can be used to start your executable binaries or scripts
  at boot up, and restart them if they exit

pmtr runs your servers
----------------------
Pmtr is a tool to start your programs-- the long-running processes that you want
to have running all the time, like your node.js server, your sensor, or your
networked applications.  It has a simple configuration file.  The config file
can have any number of "jobs" - the programs you want pmtr to start up at boot:

.Example `/etc/pmtr.conf`
--------------------------------------------------------
  job {
    name nodejs
    cmd /bin/node websocket.js
  }

  job {
    name ingest
    dir /data
    cmd /usr/sbin/tcpdump -i tap -s 0 -G 10 -w %Y%m%d%H%M%S.pcap
  }

--------------------------------------------------------

You can also specify standard output redirection, environment variables, the
user to run the process, etc. See the <<options,full options>> below. 

Pmtr starts these programs (jobs) at boot, and restarts them if they exit or
crash. Pmtr is small, written in C, open-source and for Linux only.  It runs on
Ubuntu, Debian, RHEL/CentOS, in Docker, on Raspberry Pi, and probably on your
toaster if it runs Linux.

.Why did I write it?
**************************************************************************
I wrote pmtr because I wanted one simple configuration file where I could
list the programs that I need to run at boot, with confidence that they'd
be restarted if they exit or crash. I also wanted to have a few special
features like the ability to bounce processes at a set interval, or edit
the config file and see those changes take effect instantly.
**************************************************************************

Pmtr applies changes immediately whenever the config file is edited- see
<<rescan,When do configuration changes take effect?>>.  Take note of the
<<requirements,requirements for pmtr jobs>>.

.Does it work?
Pmtr has been used for several years in production, to run all manor of 
C, Python, Perl, Java, bash and node.js programs.

.What's with the name?
It was once called a process manager, then a process monitor, hence pmtr.

Download & Install
------------------

Platforms
~~~~~~~~~
Pmtr is for Linux only. It's been tested on:

* Ubuntu (10,11,12,13)
* CentOS/RHEL (6+)
* Debian (6+)
* Raspbian (6,7) (Raspberry Pi)

Download options
~~~~~~~~~~~~~~~~

The options on the https://github.com/troydhanson/pmtr[pmtr Github page] include:

 * download a https://github.com/troydhanson/pmtr/archive/master.zip[zipfile]. 
 * clone it: 
 
  git clone https://github.com/troydhanson/pmtr.git

Build and install
~~~~~~~~~~~~~~~~~
To build and install:

  cd pmtr
  make
  sudo make install

It should be running at this point.  Verify using:

  service pmtr status

The result of installation is:

 * the executabe: `/usr/bin/pmtr` 
 * the configuration file: `/etc/pmtr.conf` 
 * an OS-specific initscript to run pmtr at boot 

If you need to, you can manually stop and start pmtr the usual way:

  service pmtr stop
  service pmtr start

Configuration file 
------------------
The pmtr configuration file is `/etc/pmtr.conf`. You can specify a different
config file using the `-c` file.

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Indentation is optional. Blank lines are ok.  Comments should
be on their own line and start with `#`.

  # this is a comment
  job {
    name stock-tracker
    cmd /usr/local/bin/node trends.js "AAPL GOOG"
  }


Options
^^^^^^^
[[options]]
[width="90%",cols="20m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | descriptive job name used for logging - must be unique
|cmd            | executable (fully-qualified) and any arguments 
|dir            | working directory (fully qualified) to run the process in
|out            | send stdout to this file
|err            | send stderr to this file
|in             | hook stdin to this file
|env            | environment variable setting `VAR=VALUE` (repeatable)
|user           | unix username under whose id to run the process 
|bounce every   | a time interval like 5m (five minutes) - units are smhd
|disable        | disables the job if present
|===============================================================================

Notes:

* the required entries are `name` and `cmd`
* The `cmd` executable must have its executable-bit set. The `cmd` specification
  may include trailing arguments e.g. `cmd /bin/node server.js`.  Double-quote
  the arguments if they contain spaces.
* An environment variable is specified like, `env LD_LIBRARY_PATH=/usr/local/lib`.
  It can be repeated on multiple lines to set several variables.
* The `disable` option is a quick way to stop a job. It's equivalent to commenting
  the job out. 
* The standard output, error and input channels (`out`, `err`, and `in`) default
  to `/dev/null`.
* The `user` defaults to root.
* The `bounce every` command is for jobs that leak memory, act up, or mis-
  behave when left running too long; it simply kills the job then restarts it.  It
  takes a number and unit, like 5m. The units are smhd- (s)econds, (m)inutes,
  (h)ours or (d)ays. The bounce timer runs every 10s, so that much additional
  time may elapse after the process is due to be bounced before it occurs.

Tips
^^^^
1. Make sure the process stays in the foreground. 
2. If your job is a shell script, and you later disable it while it's running,
   the shell script may or may not convey the signal to its own sub-processes.
   You have to be a little more careful with shell scripts to prevent orphaned
   child processes of the script from lingering around in that situation.
3. There is no shell expansion in the `cmd`: things like wildcards and backticks
   do not work, nor do environment variables like `$PWD`. If you need shell
   features, write a shell wrapper around your executable (but note #2 above), 
   or invoke the shell "inline" to build and run your command, like:

   cmd /bin/bash -c "DATE=`date`; /bin/node -d $DATE"

Checking config syntax
~~~~~~~~~~~~~~~~~~~~~~
Syntax errors- like other pmtr messages- get reported via syslog. Typically
this goes to `/var/log/messages` (RHEL/CentOS) or `/var/log/syslog` (Ubuntu).
To check the syntax of a configuration file manually, you can use the test flag
`-t` like: `pmtr -tc /etc/pmtr.conf`.

[[rescan]]
When do configuration changes take effect?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes get applied immediately. There
is no need to signal pmtr because it watches the config file for changes. 

 * A newly-added job gets started.
 * A deleted job is terminated.
 * A changed job is restarted with its new configuration.

To terminate a job, pmtr sends SIGTERM to it, then SIGKILL shortly afterward.

If you stop pmtr itself (for example, by running `service pmtr stop`), it
terminates its jobs before exiting.  

Jobs
----

Hint: a nice representation of the process hierarchy can be obtained using
`pstree -p` (if that utility is installed). This can be used to verify the
process tree that's running under pmtr matches your expectation.

[[requirements]]
Is the job suitable to run under pmtr?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In pmtr the term 'job' means a daemon. For our purposes, this is just
some executable- a binary or script- that you want to keep running. It must:

 * stay in the foreground
 * exit on SIGTERM or SIGKILL 
 * clean up any of its own own sub-processes when it exits

.Not for background daemons 
*********************************************************************************
In ye olden days a daemon usually had to put itself in the background- but don't
try to run one of those forking/detaching, background-style daemons under pmtr.
Pmtr wants its jobs to stay in the foreground. This makes it easy for pmtr to
notice if the job exited, and to send it a signal when pmtr wants it to exit. 
*********************************************************************************

Restart handling
~~~~~~~~~~~~~~~~
Pmtr is designed for daemon-style processes that run for a long time, or
forever. So, if a job exits, pmtr restarts it.

There are two caveats:

* If a job exits within ten seconds of when it started, pmtr waits waits ten
  seconds before restarting it. This avoids rapid restart cycles.  A quick exit
  often means the job has some sort of configuration problem.
* Exit code 33 can be issued from a process to tell pmtr not to restart it.

Logging
~~~~~~~
Look in syslog (typically `/var/log/messages` or `/var/log/syslog`) to see
pmtr log messages relating to configuration file changes and job activity.

  Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job websocket-server [18478]

Lesser features
~~~~~~~~~~~~~~~

Report/Listen
^^^^^^^^^^^^^
These two experimental features providing limited reporting and control
over the network are *disabled by default*.  To enable them, these global
configuration options may appear in `pmtr.conf`.

  report to udp://127.0.0.1:9999
  listen on udp://0.0.0.0:10000

The `report to` option designates a remote endpoint to receive updates from
pmtr, via a UDP packet sent by pmtr to the remote endpoint every ten seconds. 
It lists the jobs and their elapsed runtime in a simple text format. A script
included with pmtr can be run to receive the reports from one, or many, pmtr
instances. It maintains a simple text file summarizing the pmtr states. This
script in `pmtr/utils` is invoked like `pmtr-rptserver -p 9999 -f status.txt`.

The `listen on` option makes pmtr listen on the specified address and UDP port 
for messages of the form "enable xyz" or "disable xyz" ('xyz' is a job name). An
example script in `pmtr/utils` can send these messages using a command line like 
`pmtr-ctl -s 192.168.0.22 -p 10000 enable xyz`.  This temporarily enables or
disables a job. When pmtr.conf is edited or pmtr is restarted, the settings
in pmtr.conf once again take precedence.  There is no authentication with the
`listen on` feature- use it only on trusted internal networks. 

Multicast interface selection
+++++++++++++++++++++++++++++
A `report to` address may be in the multicast UDP range (e.g. 239.0.0.1, etc).
If it is, the specification may optionally include a trailing interface name.
This selects the network interface from which the UDP datagrams should egress.

  report to udp://239.0.0.1:9999@eth2

One-time jobs
^^^^^^^^^^^^^
For "initial setup" situations, pmtr has limited support for one-time jobs. The
`wait` option makes pmtr wait (for that job to exit) before starting subsequent
jobs. To prevent pmtr from restarting it, also use the `once` option. (A change
to the job configuration would cause pmtr to execute the job again, naturally).

  job {
        name setup-ramdisk
        cmd /bin/mkdir -p /dev/shm/ws/data
        wait
        once
  }

Resources
---------
* the https://github.com/troydhanson/pmtr[pmtr Github page]- for bug reports and pull requests
* the http://troydhanson.github.io/[author's GitHub page] lists my other software
* my http://tkhanson.net/blog[blog], and twitter https://twitter.com/troydhanson[@troydhanson].
* You can email me at tdh@tkhanson.net. (I may not be able to reply, sorry!)

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.


// vim: set tw=80 wm=2 syntax=asciidoc: 

