pmtr job manager
================
Troy D. Hanson <tdh@tkhanson.net>
v1.2, September 2012

What does pmtr do?
------------------
Pmtr is a process monitor for starting your servers at system boot, and keeping
them running. It's small, written in C, free, open-source and for Linux only.
With pmtr, all your jobs are defined in one configuration file:

.Example `/etc/pmtr.conf`
--------------------------------------------------------
  job {
    name minecraft-server
    dir /home/mc
    cmd /usr/bin/java -jar minecraft_server.jar nogui
    err mc.err
    out mc.out
    user mc
  }

  job {
    name cpu-monitor
    cmd /bin/cpu-monitor -x 
  }
--------------------------------------------------------

Here, for the sake of illustration, we're running a Minecraft server and
a CPU monitoring job. As you can see- only the name and command are required.
If you want to, you can specify the working directory, a user other than root
to run the process, and where to put the output and error.  The <<options,full
options>> are documented below. 

.Why did I write it?
**************************************************************************
I wrote pmtr because I wanted to have all my application jobs listed in one
easily-edited configuration file. I also wanted them kept separate from the 
system daemons managed by sysvinit and similar mechanisms. 
**************************************************************************

Download & Install
------------------

Platforms
~~~~~~~~~
Pmtr is *Linux only*, because it uses inotify. (It'd probably be an easy
port to other Unix variants. If you do, feel free to send me a patch.)

It's been tested on:

* Ubuntu (10.04)
* Debian (6.0.4)
* RHEL (6.3)

Download options
~~~~~~~~~~~~~~~~
You can download pmtr either of these ways:

Clone the git repository::

  git clone git://github.com/troydhanson/pmtr.git

Download a tarball::

  A tarball is available at: https://github.com/troydhanson/pmtr/tarball/master

Build and install
~~~~~~~~~~~~~~~~~
To build and install:

  cd pmtr
  make
  sudo make install

The result of installation is:

 * the binary itself `/usr/bin/pmtr`, 
 * the configuration file `/etc/pmtr.conf` which is initially empty,
 * a system startup script that runs pmtr at boot as described next.

Upon completion of `sudo make install`, pmtr should be running. Verify using:

  service pmtr status

.Who starts pmtr?
********************************************************************************
Pmtr starts up automatically during the boot process. An OS-specific initscript
makes this happen. (They're in the `initscripts/` directory if you're curious). 
Manual control is supported. You can use your system's `service` command to run
the usual administrative commands, like `service pmtr start` or `stop`.
********************************************************************************

Logging
~~~~~~~
Status messages are sent to *syslog*. Typically these go to `/var/log/messages`:

  Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: pmtr: managing 1 jobs
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job doppler [18478]

Configuration file 
------------------
When pmtr is started at system boot, it reads the configuration file --
by default `/etc/pmtr.conf` -- and starts up the jobs defined there. 

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Indentation is optional. Blank lines are ok. 

  job {
    name mumble-server
    cmd /usr/bin/mumble
  }

Only 'name' and 'cmd' are required. The `cmd` is the *absolute path* to the
executable (which must have its executable bit set). 

The command may contain simple or 'double-quoted' arguments.  Like this,

  cmd /bin/echo -n "st paul"

Comments should be on their own line and prefaced with `#`.

  # this is a comment

Job options
~~~~~~~~~~~
[[options]]
[width="90%",cols="10m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | job name 
|cmd            | absolute path to executable with optional arguments
|dir            | absolute path to the working directory 
|out            | file to receive standard output 
|err            | file to receive standard error 
|user           | user under whose uid the job should run
|env            | `VAR=VALUE` environment variable settings (repeatable)
|disable        | if present, disables the job 
|===============================================================================

name::
  unique 'name' for the job, to make log messages more readable

cmd::
  the absolute pathname to an executable, with optional arguments.
  Quoting (using double-quotes only) is supported in the arguments. 

dir::
  set the 'working directory' that the job will have upon startup.

out::
  file to receive stdout. Default: `/dev/null`

err::
  file to receive stderr. Default: `/dev/null`

user::
  the unix username under which the job should be executed. Default: root.

env::
  set an environment variables for the job, e.g., `env DEBUG=1` (repeatable)

disable::
  make the job inactive. Usually easier than commenting out the job definition.

When do configuration changes take effect?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes get applied immediately. (Pmtr
uses inotify to get signalled when the configuration file has changed).

 * If you add a job, it gets started.
 * If you delete a job, or give it the `disable` option, or comment it out, it
   gets terminated.  Pmtr sends SIGTERM to it, then SIGKILL shortly afterward.
 * If you change a job, it gets restarted with the new settings. 

Other running jobs are left alone- they're not needlessly restarted. All this
happens immediately whenever the configuration file is modified and written.

If you stop pmtr itself (for example, by running `service pmtr stop`), it
terminates its jobs before exiting.  

Testing config file syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
You can check the syntax of a configuration file using,

  pmtr -tc /etc/pmtr.conf

The meaning of these options are:

  -t test syntax only (don't start any jobs, and stay in foreground)
  -c <file> specify configuration file

Jobs
----

Is the job suitable to run under pmtr?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jobs that you intend to run under `pmtr` should:

 * stay in the *foreground*
 * *exit* on SIGTERM or SIGKILL 
 * cause any *sub-processes* to exit if the job exits

Restart handling
~~~~~~~~~~~~~~~~
Pmtr restarts a job that exits, provided it's been running at least ten seconds.

Restart loops
^^^^^^^^^^^^^
When a job exits less than 10 seconds after it started, pmtr waits ten seconds
before restarting it.  This avoids pegging the CPU with rapid restart cycles.  
Since pmtr is oriented toward running daemons, a quick exit usually means the
job has some kind of problem (bad arguments, etc) that need to be fixed.

  Nov  7 22:01:13 ubuntu pmtr[18477]: job x 8552 exited after 3 sec: exit status 0
  Nov  7 22:01:13 ubuntu pmtr[18477]: job restarting too fast, delaying restart

Restart prevention
^^^^^^^^^^^^^^^^^^
To prevent pmtr from restarting a job, use the 'once' keyword.  As a
programmatic alternative, if the job exits with exit status 33, pmtr won't
restart it either. 

One-time jobs
+++++++++++++
Pmtr has limited support for one-time jobs intended for initial "setup"
situations. The use case is when you want the job to run once (not be
restarted), and to wait for it to finish before starting subsequent jobs.
Here's an example where we create a directory in a RAM disk.

  job {
    name setup
    cmd /bin/mkdir -p /dev/shm/ramdisk
    wait
    once
  }

The `wait` option prevents pmtr from starting subsequent jobs until this one
finishes, and `once` prevents pmtr from restarting it.

Resources
---------

News
~~~~
Updates are posted to the http://tkhanson.net/blog[author's blog]. image:rss.png[(RSS)]

Other software
~~~~~~~~~~~~~~
The author's other open-source software are listed at http://tkhanson.net.

Contact
~~~~~~~
Please send bug reports or suggestions to tdh@tkhanson.net.

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.


// vim: set tw=80 wm=2 syntax=asciidoc: 

