pmtr job manager
================
Troy D. Hanson <tdh@tkhanson.net>
v1.0.0, November 2011

What does pmtr do?
------------------
The pmtr utility is for starting your application jobs at system boot. It also
lets you add, remove or modify jobs at runtime.  It's free, open-source and for
Linux only.  What makes pmtr different from sysvinit and similar is that all your
jobs are defined in one configuration file, and the syntax is friendly.

.Example `/etc/pmtr.conf`
--------------------------------------------------------
  job {
    name doppler
    cmd /usr/bin/doppler
  }

  job {
    name radar
    cmd /usr/bin/radar -v
    dir /data
    err radar.err
    out radar.out
  }
--------------------------------------------------------

In this example the first job, `doppler`, uses default settings; it discards
standard output and standard error, and runs with its working directory to `/`.
The second example, `radar`, uses a few extra options to customize the working
directory, and designates files to receive standard output and error.  
The <<options,full options>> are documented below. 

.Why did I write it?
**************************************************************************
I wrote pmtr because I wanted to have all my application jobs listed in one
easily-edited configuration file. I also wanted them kept separate from the 
system daemons managed by sysvinit and similar mechanisms. 
**************************************************************************

Download & Install
------------------

Download options
~~~~~~~~~~~~~~~~
You have these download options for pmtr.

Clone the git repository::

  git clone git://github.com/troydhanson/pmtr.git

Download a tarball::

  A tarball is available at: https://github.com/troydhanson/pmtr/tarball/master

Build and install
~~~~~~~~~~~~~~~~~
To build and install:

  cd pmtr
  make
  sudo make install

The result of installation is the binary itself `/usr/bin/pmtr`, the
configuration file (initially empty) `/etc/pmtr.conf`, and a system startup
script that runs pmtr at boot as described next.

How pmtr starts at boot
^^^^^^^^^^^^^^^^^^^^^^^
When you do `make install` on Ubuntu 10+, it installs an 'upstart' job; or, on
RedHat/CentOS a 'sysvinit' script, to start pmtr at system boot. It also starts pmtr
immediately.

Logging
-------
Status messages are sent to *syslog*. Typically these go to `/var/log/messages`:

  Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: pmtr: managing 1 jobs
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job doppler [18478]

Jobs
----

Requirements
~~~~~~~~~~~~
Jobs that you intend to run under `pmtr` should:

 * stay in the *foreground*
 * *exit* on SIGTERM or SIGKILL 
 * arrange so any *sub-processes exit* if the job itself exits

Clean exits
^^^^^^^^^^^
Note the last bullet. Shell scripts are especially likely to leave sub-processes
around if they exit.  (Shells don't always pass signals down to their children).
For example, if you have a shell script like this,

  #!/bin/bash
  command | etc

and if you run this shell script as a `pmtr` job, then later delete or disable
the job while it's running, pmtr signals the shell process to exit-- but the
sub-processes `command` and `etc` may continue to run. Avoid this-- instead,
construct your jobs to exit cleanly, so sub-processes exit if the parent exits.
(For example, C programs on Linux can use `prctl(PR_SET_PDEATHSIG, SIGHUP);`
to get signalled if the parent exits).

Job control
~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes you made get applied immediately.

 * If you add a job, it gets started.
 * If you delete a job, or give it the `disable` option, or comment it out, it
   gets terminated.  
 * If you change a job, it gets restarted with the new settings. 

Other running jobs are left alone- they're not needlessly restarted. All this
happens immediately whenever the configuration file is modified.

Job restart
~~~~~~~~~~~
When a job exits-- assuming it's been running at least ten seconds-- pmtr restarts
it. 

Inhibiting restart
^^^^^^^^^^^^^^^^^^
There are two ways to inhibit automatic restart: the job itself can exit
with status 33, which pmtr interprets as a "don't restart" indicator; or the
the job can use the  'once' option in the configuration file, described below.

Avoiding fast restarts
^^^^^^^^^^^^^^^^^^^^^^
When a job exits less than 10 seconds after it started, pmtr waits ten seconds
before restarting it.  This avoids rapid restart loops.  

  Nov  7 22:01:13 ubuntu pmtr[18477]: job xyz 18552 exited after 3 sec: exit status 0
  Nov  7 22:01:13 ubuntu pmtr[18477]: job restarting too fast, delaying restart

Since pmtr is oriented toward running daemons, a quick exit usually means the
job has some kind of problem (bad arguments, etc) that need to be fixed.

Job shutdown
~~~~~~~~~~~~~
You can stop a job running under `pmtr` by opening the configuration file and
deleting (or commenting out) the job definition, or using the `disable` option:

  job {
    name tw-sender
    cmd /usr/bin/tw-sender -a
    disable
  }

When you save the configuration file, pmtr re-scans it, notices the change and
terminates the job.  Job termination is handled by sending SIGTERM, then
SIGKILL shortly afterward.

If you stop pmtr (for example, by running `service pmtr stop`), it terminates
all its jobs before exiting.  

Configuration file 
------------------
When pmtr is started at system boot, it reads the configuration file --
by default `/etc/pmtr.conf` -- and starts up the jobs defined there. 

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Comments should be on their own line and prefaced with `#`.
Indentation is optional. Blank lines are ok. 

  #####################
  # temperature sensor
  #####################
  job {
    name temp-sensor
    cmd /usr/bin/temp-sensor -a "st paul"
    dir /usr/temp
    out weather.out
    err weather.err
  }

Only 'name' and 'cmd' are required. The `cmd` is the *absolute path* to the
executable (which must have its executable bit set). The command may contain
options and simple double-quoted arguments. 

Job options
~~~~~~~~~~~
[[options]]
[width="90%",cols="10m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | job name 
|cmd            | absolute path to executable with optional arguments
|dir            | absolute path to the working directory 
|out            | file to receive standard output 
|err            | file to receive standard error 
|user           | user under whose uid the job should run
|env            | `VAR=VALUE` environment variable settings (repeatable)
|disable        | special shortcut to disable a job, usually temporarily
|===============================================================================

name::
  The 'name' must be unique. It is used to make log messages more readable.

cmd::
  The 'cmd' is the absolute pathname to an executable, with optional arguments.
  Quoting (using double-quotes only) is supported in the arguments. 

dir::
  Sets the 'working directory' that the job will have upon startup.

out::
  file (may be relative to the working directory) to receive stdout. Default: `/dev/null`

err::
  file (may be relative to the working directory) to receive stderr. Default: `/dev/null`

user::
  If specified, the job is run under the user's uid rather than root's uid

env::
  sets an environment variables for the job, e.g., `env XLIB=/usr/lib/xlib.so` (repeatable)

disable::
  causes the job definition to be inactive. This is sometimes more convenient
  than commenting out the whole job definition.

One-time jobs
~~~~~~~~~~~~~

Sometimes we want to run one or more "setup" jobs before our daemons. The setup
job should run to completion, and not be restarted when it exits. For this, you
can use the `wait` option and the `once` option.  When a job has the `wait`
option, pmtr waits until it exits before starting up subsequent jobs (those
which appear later in the configuration file).  This is used with 'once' to
prevent the job from restarting. (You can also use `once` without `wait`).

  job {
    name setup
    cmd /bin/mkdir /dev/shm/ramdisk
    wait
    once
  }

Manaul startup options
~~~~~~~~~~~~~~~~~~~~~~
Normally the only reason to run `pmtr` manually is to test the validity of a
configuration file. The supported options to pmtr are:

  -t test; parse config file only (implies -F)
  -c <file> specify configuration file
  -F foreground
  -v verbose

Resources
---------

News
~~~~
Updates are posted to the http://tkhanson.net/blog[author's blog]. image:rss.png[(RSS)]

Other software
~~~~~~~~~~~~~~
The author's other open-source software are listed at http://tkhanson.net.

Contact
~~~~~~~
Please send bug reports or suggestions to tdh@tkhanson.net.

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.

// vim: set tw=80 wm=2 syntax=asciidoc: 

