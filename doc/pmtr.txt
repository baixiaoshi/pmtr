pmtr process monitor
====================
Troy D. Hanson <tdh@tkhanson.net>
v1.0.0, November 2011

Quick primer
------------
The `pmtr` utility is a process monitor: it starts your Linux daemons at
boot, restarts them if they exit, and lets you configure their environment.
Jobs are specified in a configuration, like this:

.Example /etc/pmtr.conf
--------------------------------------------------------------------------
  job {
    name weather-server
    cmd /usr/local/bin/weather -v 
  }

  job {
    name doppler-update
    cmd /usr/bin/dop-up
    dir /var/log
    err dop.err
    out dop.out
  }
--------------------------------------------------------------------------

This fictional example defines two jobs. One of them has only a name and a
command to execute. The other job includes further options to set the stdout
and stderr destinations.  The <<options,full options>> are documented below. 

What does pmtr do?
~~~~~~~~~~~~~~~~~~
When `pmtr` is started at system boot, it reads the configuration file --
by default `/etc/pmtr.conf` -- starts up the jobs defined there, and then
monitors the jobs, in order to restart them if they exit. It also detects
changes to the configuration file, and will start/stop jobs accordingly.

.Why did I write it?
**************************************************************************
I had a few reasons for writing my own process monitor instead of sysvinit
scripts to manage my daemon processes. I wanted:

 * to have one configuration file for all my application daemons
 * to have as few features as possible, to keep things simple

On the process management spectrum, `pmtr` is a tiny, unsophisticated 
utility -- which is exactly what I wanted.
**************************************************************************

Installation
------------
Download the `pmtr` source:

  git clone git://github.com/troydhanson/pmtr.git

Then build and install:

  cd pmtr
  make
  sudo make install

Boot-up: who starts pmtr?
~~~~~~~~~~~~~~~~~~~~~~~~~
There is still a need for `pmtr` itself to be started at system boot.  

Ubuntu Linux
^^^^^^^^^^^^ 
There is an "upstart" script included for this purpose.

  cp upstart/pmtr.conf /etc/init

The root user can then use the `service` command to start it up initially:
`service pmtr start`.

Other distributions
^^^^^^^^^^^^^^^^^^^
There is no sysvinit script included for other Linux distributions currently.
I hope to add one (if you want to send one to me for inclusion, please do).

Manual startup
^^^^^^^^^^^^^^
You can start pmtr by hand. This is useful to test the configuration file for 
syntax errors using the `-t` option. The supported `pmtr` startup options are:

  -v verbose
  -F foreground
  -c <file> specify configuration file
  -t test only; parse config file only (implies -F)

Running jobs
------------

Create a file called `/etc/pmtr.conf` and place your job definitions inside.

.Another example /etc/pmtr.conf
--------------------------------------------------------------------------
  job {
    name stub
    cmd /bin/sleep 30
  }
--------------------------------------------------------------------------

If necessary, start up pmtr (`service pmtr start`) and it should start 
running this job.  We'll use this simple job to point out a few things.

Logging
~~~~~~~
Events are logged via syslog, typically to `/var/log/messages`.

./var/log/messages
--------------------------------------------------------------------------
Nov  7 21:38:10 ubuntu pmtr[18477]: pmtr: managing 1 jobs
Nov  7 21:38:10 ubuntu pmtr[18477]: started job stub [18478]
--------------------------------------------------------------------------

Restarting
~~~~~~~~~~
If you keep watching for more than 30 seconds, you'll notice that the
`sleep` process exits, and then `pmtr` restarts it.

./var/log/messages
--------------------------------------------------------------------------
Nov  7 21:38:40 ubuntu pmtr[18477]: job stub 18478 exited after 30 sec: exit status 0
Nov  7 21:38:40 ubuntu pmtr[18477]: started job stub [18481]
--------------------------------------------------------------------------

Normally `pmtr` is used to manage daemons, that are expected to run
indefinitely. But since real programs do exit now and then, `pmtr` reports
the exit status or the signal that the job exited on, and then restarts it.

NOTE: a job can indicate "do not restart me" by exiting with status 33.

Configuration file changes
~~~~~~~~~~~~~~~~~~~~~~~~~~
Now go ahead and edit the `/etc/pmtr.conf` file and change the job definition
so that the sleep lasts only 3 seconds, instead of 30:

    cmd /bin/sleep 3

As soon as you write the file, `pmtr` will detect the change. In the logs,

./var/log/messages
--------------------------------------------------------------------------
Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
Nov  7 22:01:10 ubuntu pmtr[18477]: job stub [18549]: exited on signal 15
Nov  7 22:01:10 ubuntu pmtr[18477]: started job stub [18552]
--------------------------------------------------------------------------

What happened?- `pmtr` saw the command changed, killed the running job,
and started a new one having the updated configuration.

Fast-restart handling
~~~~~~~~~~~~~~~~~~~~~
If you keep watching the logs, you'll notice that this job (which exits after
only 3 seconds), induces `pmtr` to delay its next restart:

./var/log/messages
--------------------------------------------------------------------------
Nov  7 22:01:13 ubuntu pmtr[18477]: job stub 18552 exited after 3 sec: exit status 0
Nov  7 22:01:13 ubuntu pmtr[18477]: job restarting too fast, delaying restart
--------------------------------------------------------------------------

Any job that exits within 10 seconds of starting causes `pmtr` to delay its
next restart (for 10 seconds). This avoids fork-bombing the system when a job
is misconfigured.

Shutdown
~~~~~~~~
Go ahead and delete the `stub` job from the configuration file. You'll see that `pmtr`
kills it. In general `pmtr` terminates jobs in these circumstances:
 
 * If you stop `pmtr` (for example using `service pmtr stop`), 
 * If you delete the job definition  
 * If you mark it `disabled` (see below)

Job termination is handled by first sending SIGTERM, then SIGKILL shortly afterward.

NOTE: It is not recommended to have jobs that spawn background processes (unless they
are designed to exit when their parent job is terminated).

Configuration options
---------------------
The configuration file can contain any number of job definitions. Each one is
in a curly-brace delimited block.  Comments can appear on their own line,
prefaced with `#`. Indentation in the block is optional. Blank lines anywhere
are ok. Only one option may appear on each line.

  #################
  # the zapper job
  #################
  job {
    name zapper
    cmd /usr/bin/zapper
    err zapper.err
    disabled
  }

Only the 'name' and 'cmd' are required. The full list of options are:

[[options]]
.Job configuration options
[width="90%",cols="10m,30m",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | job name 
|cmd            | path to executable with optional arguments
|dir            | path to the working directory 
|out            | file to receive standard output 
|err            | file to receive standard error 
|user           | user under whose uid the job should run
|env            | VAR=VALUE specification of an environment variable 
|disabled       | (none)
|once*          | (none)
|wait*          | (none)
|order*         | integer
|===============================================================================

name::
  The 'name' must be unique. It is only used as a label to make log messages more
  readable.

cmd::
  The 'cmd' is the *absolute pathname* to an executable, with optional arguments.
  Basic quoting, using double-quotes only, is supported in the arguments. 

dir::
  Determines the 'current working directory' that the job will have upon startup

out::
  filename (may be relative to the working directory) to receive stdout. Default: `/dev/null`

err::
  filename (may be relative to the working directory) to receive stderr. Default: `/dev/null`

user::
  If specified, the job is run under the user's uid rather than root's uid

env::
  sets an environment variables for the job, e.g., `env XLIB=/usr/lib/xlib.so` (repeatable)

disabled::
  causes the job definition to be inactive 

Special options for precursor jobs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: These options are not used for most jobs.

Normally jobs are all started at the same time. There is no waiting and no dependency
expected between jobs. However, in cases where you want one 'non-daemon' job to run to
completion before running other jobs -- for example to set up an initial resource --
you can use the 'wait' option. This causes the `pmtr` to delay starting up the rest
of the jobs (those which appear later in the configuration file) until the job
completes. This is used with 'once' since it is meant for jobs that should
complete, and not be restarted.

  job {
    name setup
    cmd /bin/ramdisk -c 10g /ram
    wait
    once
  }

once::
  do not restart when the job exits (also induced if the job exits with code 33)

wait::
  delay the startup of other jobs until this job completes (used with 'once')

Resources
~~~~~~~~~
News::
 Updates are posted to the http://troydhanson.wordpress.com/[author's blog] image:rss.png[(RSS)].
 The author has a news feed for http://troydhanson.wordpress.com/feed/[software updates] image:img/rss.png[(RSS)].

Contact::
 Send bug reports, suggestions, to tdh@tkhanson.net.

// vim: set tw=80 wm=2 syntax=asciidoc: 

