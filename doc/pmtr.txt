pmtr job manager
================
Troy D. Hanson <tdh@tkhanson.net>
v1.3 November 2013

What does pmtr do?
------------------
Pmtr is a process monitor for starting your servers at system boot, and keeping
them running. It's small, written in C, free, open-source and for Linux only.
With pmtr, all your jobs are defined in one configuration file:

.Example `/etc/pmtr.conf`
--------------------------------------------------------
  job {
    name app-webserver
    cmd /home/app/webserver.py 
  }

  job {
    name app-server
    dir /home/app
    cmd /home/app/server -c 20 
    out server.out
    err server.err
    user app
  }
--------------------------------------------------------

Only the `name` used for logging and `cmd` (the command) are required.  The
following are optional: the working directory, files to receive stderr and
stdout, and the user whose id should run the process. See the <<options,full
options>> below. 

.Why did I write it?
**************************************************************************
I wrote pmtr because I wanted to have all my application jobs listed in one
easily-edited configuration file. I also wanted them kept separate from the 
system services managed by sysvinit, upstart or similar mechanisms. 
**************************************************************************

Some of the other features of pmtr are protection against jobs that restart too
fast, automatic re-scanning of an updated configuration file, and basic remote
reporting. Note that the jobs should stay in the foreground so pmtr can detect
if they restart. See the <<requirements,requirements for pmtr jobs>> below.

Pmtr has been used in production to manage jobs on hundreds on Linux systems.

Download & Install
------------------

Platforms
~~~~~~~~~
Pmtr is for Linux only. It's been tested on:

* Ubuntu (10+)
* CentOS/RHEL (6+)
* Debian (6+)

Download options
~~~~~~~~~~~~~~~~

You can:

 * download a https://github.com/troydhanson/pmtr/archive/master.zip[zipfile here]. 
 * Or clone the git repository: `git clone https://github.com/troydhanson/pmtr.git`

Build and install
~~~~~~~~~~~~~~~~~
To build and install:

  cd pmtr
  make
  (if pmtr is already running, stop it using service pmtr stop)
  sudo make install

The result of installation is:

 * `/usr/bin/pmtr` - the executable
 * `/etc/pmtr.conf` - the configuration file (initially empty)
 * `/usr/bin/pmtr-rptserver` - for remote monitoring of ptmr jobs
 * `/usr/bin/pmtr-ctl` - for remote disabling and enabling of jobs
 * an OS-specific startup script that runs pmtr at boot 

Upon completion of `sudo make install`, pmtr should be running. Verify using:

  service pmtr status

.Who starts pmtr?
********************************************************************************
Pmtr starts up automatically during the boot process. An OS-specific initscript
makes this happen.  You can use your system's `service` command to start and
stop pmtr manually (like `service pmtr start`), but normally you just let the OS
start up pmtr automatically at boot.
********************************************************************************

Configuration file 
------------------
When pmtr is started at system boot, it reads the configuration file --
by default `/etc/pmtr.conf` -- and starts up the jobs defined there. 

Syntax
~~~~~~
The configuration file contains any number of jobs. Each job is in a curly-brace
delimited block.  Indentation is optional. Blank lines are ok. 

  # this is a comment
  job {
    name geo-server
    cmd /usr/bin/server -e "New York"
  }

Only 'name' and 'cmd' are required. The `cmd` is the absolute path to the
executable. It must have its executable bit set.  The command may contain 
arguments; double-quote the arguments if they contain spaces. Comments should
be on their own line and start with `#`.

Job options
~~~~~~~~~~~
[[options]]
[width="90%",cols="10m,50",grid="none",options="header"]
|===============================================================================
|option         | argument
|name           | job name (used for logging)
|cmd            | absolute path to executable, with optional arguments
|dir            | optional- absolute path to the working directory 
|out            | optional- file to receive stdout
|err            | optional- file to receive stderr
|in             | optional- file to set up as stdin
|user           | optional- user whose id to run the job as
|env            | optional- `VAR=VALUE` environment variable settings (repeatable)
|disable        | optional- if present, disables the job 
|===============================================================================

name::
  unique 'name' for the job, to make log messages more readable

cmd::
  the absolute pathname to an executable, with optional arguments.
  Quoting using double-quotes is supported in the arguments. 

dir::
  set the 'working directory' that the job will have upon startup.

in::
  file to open as stdin. Default: `/dev/null`

out::
  file to receive stdout. Default: `/dev/null`

err::
  file to receive stderr. Default: `/dev/null`

user::
  the unix username whose id should execute the job. Default: root.

env::
  set an environment variable for the job, e.g., `env DEBUG=1` (repeatable)

disable::
  make the job inactive. Can be used instead of commenting out the job definition.

One-time jobs
+++++++++++++
Pmtr has limited support for one-time jobs intended for "initial setup" type of
situations.  There are two options that are used for this.  The `wait` option
prevents pmtr from going on to start subsequent jobs, until this one exits.
Then, `once` tells pmtr not to restart it. (If pmtr itself is restarted, or if
the job configuration is changed, the job would be executed once again).

  job {
    name setup-ramdisk
    cmd /bin/mkdir /dev/shm/app-ramdisk
    wait
    once
  }

Testing config file syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
You can check the syntax of a configuration file using `-t` (test syntax only)
which may be used with `-c` to specify a configuration to test. Any syntax errors
are displayed; the exit code is always 0.

  pmtr -tc /tmp/pmtr.conf

When do configuration changes take effect?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you edit and save `pmtr.conf`, the changes get applied immediately. Pmtr
watchces the configuration file to notice when it has been updated. The changes
are applied minimally - only jobs whose definition has changed are affected. 

 * A newly-added job gets started.
 * A deleted job is terminated.
 * A changed job is restarted with its new configuration.

To terminate a job, pmtr sends SIGTERM to it, then SIGKILL shortly afterward.

If you stop pmtr itself (for example, by running `service pmtr stop`), it
terminates its jobs before exiting.  

Jobs
----

Logging
~~~~~~~
As jobs start up, exit, and so on, messages are sent to *syslog*. Depending on
your syslog configuration, the messages might go to `/var/log/syslog`, or
`/var/log/messages`, or somewhere else. Typical log messages are like:

  Nov  7 22:01:09 ubuntu pmtr[18477]: rescanning job configuration
  Nov  7 21:38:10 ubuntu pmtr[18477]: pmtr: managing 1 jobs
  Nov  7 21:38:10 ubuntu pmtr[18477]: started job doppler [18478]

[NOTE]
.Look for errors 
If there's a syntax error or other problem (such as invalid user) in
your configuration, pmtr can only communicate that back to you in the
log messages - so be sure you check them when making config changes!

[[requirements]]
Is the job suitable to run under pmtr?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jobs that you intend to run under `pmtr` should:

 * stay in the *foreground*
 * *exit* on SIGTERM or SIGKILL 
 * cause any *sub-processes* to exit if the job exits

Restart handling
~~~~~~~~~~~~~~~~
Pmtr restarts a job that exits, provided it's been running at least ten seconds.

Rapid restart prevention
^^^^^^^^^^^^^^^^^^^^^^^^
If a job exits quickly after starting (less than 10 seconds after it started),
pmtr waits ten seconds before restarting it. This avoids rapid restart cycles.
For servers, a quick exit often means the job has some sort of configuration problem.

  Nov  7 22:01:13 ubuntu pmtr[18477]: job app-server 8552 exited after 0 sec: exit status 0

Exit status
^^^^^^^^^^^
A job that exits normally or terminates due to a signal is logged with its exit
code or signal number. Note that exit code 33 is special. If pmtr sees a job
exit with code 33 it does not restart it.

Remote control
--------------
Two special configuration options can appear in `pmtr.conf`. The first is
`report to` which causes pmtr to send a periodic (every 10 seconds) status
message to the remote UDP endpoint whose IP address and port number are listed.
It can be repeated multiple times to report to multiple remote endpoints.

  report to udp://127.0.0.1:9999

The script in `pmtr-rptserver` can be run on a remote system to receive these
packets and maintain a file with the status of all reporting systems. E.g.,

  /usr/bin/pmtr-rptserver -p 9999 -f /var/log/pmtr-status.txt

The other special option allows remote systems to enable or disable pmtr jobs.

  listen on udp://0.0.0.0:10000

With that specification, pmtr listens on all local IP addresses (0.0.0.0) on
port 10000 for UDP messages of the form "enable xyz" or "disable xyz". There is
a script to make it easy to send these messages like this:

  /usr/bin/pmtr-ctl -s 127.0.0.1 -p 10000 enable app-server

This is intended for temporary job enabling or disabling. If `pmtr.conf` is 
edited or if pmtr is restarted, the settings in the `pmtr.conf` take effect.

There is no authentication with the `listen on` feature- use it only on trusted
internal networks. 

Resources
---------

News
~~~~
Updates are posted to the http://tkhanson.net/blog[author's blog]. image:rss.png[(RSS)]

Contributing
~~~~~~~~~~~~
Feel free to send pull requests through the https://github.com/troydhanson/pmtr[pmtr Github page].
Please send bug reports or suggestions through GitHub. You can also email me at
tdh@tkhanson.net, but I'm often behind by weeks or months in getting back to people.

Other software
~~~~~~~~~~~~~~
The author's other open-source software are listed at http://tkhanson.net.

License
~~~~~~~
See the link:LICENSE.txt[LICENSE] file.


// vim: set tw=80 wm=2 syntax=asciidoc: 

